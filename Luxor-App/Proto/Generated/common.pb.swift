// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: common.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Common_PhotoType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case userPhoto // = 0
  case emiratesPhoto // = 1
  case passportPhoto // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .userPhoto
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .userPhoto
    case 1: self = .emiratesPhoto
    case 2: self = .passportPhoto
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .userPhoto: return 0
    case .emiratesPhoto: return 1
    case .passportPhoto: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Common_PhotoType] = [
    .userPhoto,
    .emiratesPhoto,
    .passportPhoto,
  ]

}

struct Common_StandardResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool = false

  var message: String = String()

  var statusCode: Int32 = 0

  var timestamp: String = String()

  var requestID: String = String()

  var errors: [String] = []

  var metadata: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Common_PaginationMeta: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var page: Int32 = 0

  var limit: Int32 = 0

  var total: Int32 = 0

  var totalPages: Int32 = 0

  var hasNext_p: Bool = false

  var hasPrev_p: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Common_Photo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var type: Common_PhotoType = .userPhoto

  var url: String = String()

  var filename: String = String()

  var size: Int64 = 0

  var mimeType: String = String()

  var uploadedAt: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "common"

extension Common_PhotoType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "USER_PHOTO"),
    1: .same(proto: "EMIRATES_PHOTO"),
    2: .same(proto: "PASSPORT_PHOTO"),
  ]
}

extension Common_StandardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StandardResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .same(proto: "message"),
    3: .standard(proto: "status_code"),
    4: .same(proto: "timestamp"),
    5: .standard(proto: "request_id"),
    6: .same(proto: "errors"),
    7: .same(proto: "metadata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.statusCode) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.timestamp) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.errors) }()
      case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.metadata) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if self.statusCode != 0 {
      try visitor.visitSingularInt32Field(value: self.statusCode, fieldNumber: 3)
    }
    if !self.timestamp.isEmpty {
      try visitor.visitSingularStringField(value: self.timestamp, fieldNumber: 4)
    }
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 5)
    }
    if !self.errors.isEmpty {
      try visitor.visitRepeatedStringField(value: self.errors, fieldNumber: 6)
    }
    if !self.metadata.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.metadata, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Common_StandardResponse, rhs: Common_StandardResponse) -> Bool {
    if lhs.success != rhs.success {return false}
    if lhs.message != rhs.message {return false}
    if lhs.statusCode != rhs.statusCode {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.requestID != rhs.requestID {return false}
    if lhs.errors != rhs.errors {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_PaginationMeta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PaginationMeta"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "page"),
    2: .same(proto: "limit"),
    3: .same(proto: "total"),
    4: .standard(proto: "total_pages"),
    5: .standard(proto: "has_next"),
    6: .standard(proto: "has_prev"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.page) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.limit) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.total) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.totalPages) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.hasNext_p) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.hasPrev_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.page != 0 {
      try visitor.visitSingularInt32Field(value: self.page, fieldNumber: 1)
    }
    if self.limit != 0 {
      try visitor.visitSingularInt32Field(value: self.limit, fieldNumber: 2)
    }
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 3)
    }
    if self.totalPages != 0 {
      try visitor.visitSingularInt32Field(value: self.totalPages, fieldNumber: 4)
    }
    if self.hasNext_p != false {
      try visitor.visitSingularBoolField(value: self.hasNext_p, fieldNumber: 5)
    }
    if self.hasPrev_p != false {
      try visitor.visitSingularBoolField(value: self.hasPrev_p, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Common_PaginationMeta, rhs: Common_PaginationMeta) -> Bool {
    if lhs.page != rhs.page {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.total != rhs.total {return false}
    if lhs.totalPages != rhs.totalPages {return false}
    if lhs.hasNext_p != rhs.hasNext_p {return false}
    if lhs.hasPrev_p != rhs.hasPrev_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Common_Photo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Photo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "url"),
    4: .same(proto: "filename"),
    5: .same(proto: "size"),
    6: .standard(proto: "mime_type"),
    7: .standard(proto: "uploaded_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.filename) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.size) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.mimeType) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.uploadedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.type != .userPhoto {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    if !self.filename.isEmpty {
      try visitor.visitSingularStringField(value: self.filename, fieldNumber: 4)
    }
    if self.size != 0 {
      try visitor.visitSingularInt64Field(value: self.size, fieldNumber: 5)
    }
    if !self.mimeType.isEmpty {
      try visitor.visitSingularStringField(value: self.mimeType, fieldNumber: 6)
    }
    if !self.uploadedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.uploadedAt, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Common_Photo, rhs: Common_Photo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.url != rhs.url {return false}
    if lhs.filename != rhs.filename {return false}
    if lhs.size != rhs.size {return false}
    if lhs.mimeType != rhs.mimeType {return false}
    if lhs.uploadedAt != rhs.uploadedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
