// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: user.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf

// MARK: - user.UserService

/// Namespace containing generated types for the "user.UserService" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
internal enum User_UserService {
    /// Service descriptor for the "user.UserService" service.
    internal static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "user.UserService")
    /// Namespace for method metadata.
    internal enum Method {
        /// Namespace for "CreateUser" metadata.
        internal enum CreateUser {
            /// Request type for "CreateUser".
            internal typealias Input = User_CreateUserRequest
            /// Response type for "CreateUser".
            internal typealias Output = User_CreateUserResponse
            /// Descriptor for "CreateUser".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "user.UserService"),
                method: "CreateUser"
            )
        }
        /// Namespace for "GetUser" metadata.
        internal enum GetUser {
            /// Request type for "GetUser".
            internal typealias Input = User_GetUserRequest
            /// Response type for "GetUser".
            internal typealias Output = User_GetUserResponse
            /// Descriptor for "GetUser".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "user.UserService"),
                method: "GetUser"
            )
        }
        /// Namespace for "UpdateUser" metadata.
        internal enum UpdateUser {
            /// Request type for "UpdateUser".
            internal typealias Input = User_UpdateUserRequest
            /// Response type for "UpdateUser".
            internal typealias Output = User_UpdateUserResponse
            /// Descriptor for "UpdateUser".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "user.UserService"),
                method: "UpdateUser"
            )
        }
        /// Namespace for "DeleteUser" metadata.
        internal enum DeleteUser {
            /// Request type for "DeleteUser".
            internal typealias Input = User_DeleteUserRequest
            /// Response type for "DeleteUser".
            internal typealias Output = User_DeleteUserResponse
            /// Descriptor for "DeleteUser".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "user.UserService"),
                method: "DeleteUser"
            )
        }
        /// Namespace for "AuthenticateUser" metadata.
        internal enum AuthenticateUser {
            /// Request type for "AuthenticateUser".
            internal typealias Input = User_AuthenticateUserRequest
            /// Response type for "AuthenticateUser".
            internal typealias Output = User_AuthenticateUserResponse
            /// Descriptor for "AuthenticateUser".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "user.UserService"),
                method: "AuthenticateUser"
            )
        }
        /// Namespace for "ValidateToken" metadata.
        internal enum ValidateToken {
            /// Request type for "ValidateToken".
            internal typealias Input = User_ValidateTokenRequest
            /// Response type for "ValidateToken".
            internal typealias Output = User_ValidateTokenResponse
            /// Descriptor for "ValidateToken".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "user.UserService"),
                method: "ValidateToken"
            )
        }
        /// Namespace for "RefreshToken" metadata.
        internal enum RefreshToken {
            /// Request type for "RefreshToken".
            internal typealias Input = User_RefreshTokenRequest
            /// Response type for "RefreshToken".
            internal typealias Output = User_RefreshTokenResponse
            /// Descriptor for "RefreshToken".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "user.UserService"),
                method: "RefreshToken"
            )
        }
        /// Namespace for "SendVerificationCode" metadata.
        internal enum SendVerificationCode {
            /// Request type for "SendVerificationCode".
            internal typealias Input = User_SendVerificationCodeRequest
            /// Response type for "SendVerificationCode".
            internal typealias Output = User_SendVerificationCodeResponse
            /// Descriptor for "SendVerificationCode".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "user.UserService"),
                method: "SendVerificationCode"
            )
        }
        /// Namespace for "VerifyCode" metadata.
        internal enum VerifyCode {
            /// Request type for "VerifyCode".
            internal typealias Input = User_VerifyCodeRequest
            /// Response type for "VerifyCode".
            internal typealias Output = User_VerifyCodeResponse
            /// Descriptor for "VerifyCode".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "user.UserService"),
                method: "VerifyCode"
            )
        }
        /// Namespace for "UploadPhoto" metadata.
        internal enum UploadPhoto {
            /// Request type for "UploadPhoto".
            internal typealias Input = User_UploadPhotoRequest
            /// Response type for "UploadPhoto".
            internal typealias Output = User_UploadPhotoResponse
            /// Descriptor for "UploadPhoto".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "user.UserService"),
                method: "UploadPhoto"
            )
        }
        /// Namespace for "GetUserPhotos" metadata.
        internal enum GetUserPhotos {
            /// Request type for "GetUserPhotos".
            internal typealias Input = User_GetUserPhotosRequest
            /// Response type for "GetUserPhotos".
            internal typealias Output = User_GetUserPhotosResponse
            /// Descriptor for "GetUserPhotos".
            internal static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "user.UserService"),
                method: "GetUserPhotos"
            )
        }
        /// Descriptors for all methods in the "user.UserService" service.
        internal static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateUser.descriptor,
            GetUser.descriptor,
            UpdateUser.descriptor,
            DeleteUser.descriptor,
            AuthenticateUser.descriptor,
            ValidateToken.descriptor,
            RefreshToken.descriptor,
            SendVerificationCode.descriptor,
            VerifyCode.descriptor,
            UploadPhoto.descriptor,
            GetUserPhotos.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "user.UserService" service.
    internal static let user_UserService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "user.UserService")
}

// MARK: user.UserService (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension User_UserService {
    /// Streaming variant of the service protocol for the "user.UserService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    internal protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "CreateUser" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `User_CreateUserRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `User_CreateUserResponse` messages.
        func createUser(
            request: GRPCCore.StreamingServerRequest<User_CreateUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<User_CreateUserResponse>

        /// Handle the "GetUser" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `User_GetUserRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `User_GetUserResponse` messages.
        func getUser(
            request: GRPCCore.StreamingServerRequest<User_GetUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<User_GetUserResponse>

        /// Handle the "UpdateUser" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `User_UpdateUserRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `User_UpdateUserResponse` messages.
        func updateUser(
            request: GRPCCore.StreamingServerRequest<User_UpdateUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<User_UpdateUserResponse>

        /// Handle the "DeleteUser" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `User_DeleteUserRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `User_DeleteUserResponse` messages.
        func deleteUser(
            request: GRPCCore.StreamingServerRequest<User_DeleteUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<User_DeleteUserResponse>

        /// Handle the "AuthenticateUser" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `User_AuthenticateUserRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `User_AuthenticateUserResponse` messages.
        func authenticateUser(
            request: GRPCCore.StreamingServerRequest<User_AuthenticateUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<User_AuthenticateUserResponse>

        /// Handle the "ValidateToken" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `User_ValidateTokenRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `User_ValidateTokenResponse` messages.
        func validateToken(
            request: GRPCCore.StreamingServerRequest<User_ValidateTokenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<User_ValidateTokenResponse>

        /// Handle the "RefreshToken" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `User_RefreshTokenRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `User_RefreshTokenResponse` messages.
        func refreshToken(
            request: GRPCCore.StreamingServerRequest<User_RefreshTokenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<User_RefreshTokenResponse>

        /// Handle the "SendVerificationCode" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `User_SendVerificationCodeRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `User_SendVerificationCodeResponse` messages.
        func sendVerificationCode(
            request: GRPCCore.StreamingServerRequest<User_SendVerificationCodeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<User_SendVerificationCodeResponse>

        /// Handle the "VerifyCode" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `User_VerifyCodeRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `User_VerifyCodeResponse` messages.
        func verifyCode(
            request: GRPCCore.StreamingServerRequest<User_VerifyCodeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<User_VerifyCodeResponse>

        /// Handle the "UploadPhoto" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `User_UploadPhotoRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `User_UploadPhotoResponse` messages.
        func uploadPhoto(
            request: GRPCCore.StreamingServerRequest<User_UploadPhotoRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<User_UploadPhotoResponse>

        /// Handle the "GetUserPhotos" method.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `User_GetUserPhotosRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `User_GetUserPhotosResponse` messages.
        func getUserPhotos(
            request: GRPCCore.StreamingServerRequest<User_GetUserPhotosRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<User_GetUserPhotosResponse>
    }

    /// Service protocol for the "user.UserService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    internal protocol ServiceProtocol: User_UserService.StreamingServiceProtocol {
        /// Handle the "CreateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_CreateUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `User_CreateUserResponse` message.
        func createUser(
            request: GRPCCore.ServerRequest<User_CreateUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<User_CreateUserResponse>

        /// Handle the "GetUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_GetUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `User_GetUserResponse` message.
        func getUser(
            request: GRPCCore.ServerRequest<User_GetUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<User_GetUserResponse>

        /// Handle the "UpdateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_UpdateUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `User_UpdateUserResponse` message.
        func updateUser(
            request: GRPCCore.ServerRequest<User_UpdateUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<User_UpdateUserResponse>

        /// Handle the "DeleteUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_DeleteUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `User_DeleteUserResponse` message.
        func deleteUser(
            request: GRPCCore.ServerRequest<User_DeleteUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<User_DeleteUserResponse>

        /// Handle the "AuthenticateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_AuthenticateUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `User_AuthenticateUserResponse` message.
        func authenticateUser(
            request: GRPCCore.ServerRequest<User_AuthenticateUserRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<User_AuthenticateUserResponse>

        /// Handle the "ValidateToken" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_ValidateTokenRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `User_ValidateTokenResponse` message.
        func validateToken(
            request: GRPCCore.ServerRequest<User_ValidateTokenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<User_ValidateTokenResponse>

        /// Handle the "RefreshToken" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_RefreshTokenRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `User_RefreshTokenResponse` message.
        func refreshToken(
            request: GRPCCore.ServerRequest<User_RefreshTokenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<User_RefreshTokenResponse>

        /// Handle the "SendVerificationCode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_SendVerificationCodeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `User_SendVerificationCodeResponse` message.
        func sendVerificationCode(
            request: GRPCCore.ServerRequest<User_SendVerificationCodeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<User_SendVerificationCodeResponse>

        /// Handle the "VerifyCode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_VerifyCodeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `User_VerifyCodeResponse` message.
        func verifyCode(
            request: GRPCCore.ServerRequest<User_VerifyCodeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<User_VerifyCodeResponse>

        /// Handle the "UploadPhoto" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_UploadPhotoRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `User_UploadPhotoResponse` message.
        func uploadPhoto(
            request: GRPCCore.ServerRequest<User_UploadPhotoRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<User_UploadPhotoResponse>

        /// Handle the "GetUserPhotos" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_GetUserPhotosRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `User_GetUserPhotosResponse` message.
        func getUserPhotos(
            request: GRPCCore.ServerRequest<User_GetUserPhotosRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<User_GetUserPhotosResponse>
    }

    /// Simple service protocol for the "user.UserService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    internal protocol SimpleServiceProtocol: User_UserService.ServiceProtocol {
        /// Handle the "CreateUser" method.
        ///
        /// - Parameters:
        ///   - request: A `User_CreateUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `User_CreateUserResponse` to respond with.
        func createUser(
            request: User_CreateUserRequest,
            context: GRPCCore.ServerContext
        ) async throws -> User_CreateUserResponse

        /// Handle the "GetUser" method.
        ///
        /// - Parameters:
        ///   - request: A `User_GetUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `User_GetUserResponse` to respond with.
        func getUser(
            request: User_GetUserRequest,
            context: GRPCCore.ServerContext
        ) async throws -> User_GetUserResponse

        /// Handle the "UpdateUser" method.
        ///
        /// - Parameters:
        ///   - request: A `User_UpdateUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `User_UpdateUserResponse` to respond with.
        func updateUser(
            request: User_UpdateUserRequest,
            context: GRPCCore.ServerContext
        ) async throws -> User_UpdateUserResponse

        /// Handle the "DeleteUser" method.
        ///
        /// - Parameters:
        ///   - request: A `User_DeleteUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `User_DeleteUserResponse` to respond with.
        func deleteUser(
            request: User_DeleteUserRequest,
            context: GRPCCore.ServerContext
        ) async throws -> User_DeleteUserResponse

        /// Handle the "AuthenticateUser" method.
        ///
        /// - Parameters:
        ///   - request: A `User_AuthenticateUserRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `User_AuthenticateUserResponse` to respond with.
        func authenticateUser(
            request: User_AuthenticateUserRequest,
            context: GRPCCore.ServerContext
        ) async throws -> User_AuthenticateUserResponse

        /// Handle the "ValidateToken" method.
        ///
        /// - Parameters:
        ///   - request: A `User_ValidateTokenRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `User_ValidateTokenResponse` to respond with.
        func validateToken(
            request: User_ValidateTokenRequest,
            context: GRPCCore.ServerContext
        ) async throws -> User_ValidateTokenResponse

        /// Handle the "RefreshToken" method.
        ///
        /// - Parameters:
        ///   - request: A `User_RefreshTokenRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `User_RefreshTokenResponse` to respond with.
        func refreshToken(
            request: User_RefreshTokenRequest,
            context: GRPCCore.ServerContext
        ) async throws -> User_RefreshTokenResponse

        /// Handle the "SendVerificationCode" method.
        ///
        /// - Parameters:
        ///   - request: A `User_SendVerificationCodeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `User_SendVerificationCodeResponse` to respond with.
        func sendVerificationCode(
            request: User_SendVerificationCodeRequest,
            context: GRPCCore.ServerContext
        ) async throws -> User_SendVerificationCodeResponse

        /// Handle the "VerifyCode" method.
        ///
        /// - Parameters:
        ///   - request: A `User_VerifyCodeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `User_VerifyCodeResponse` to respond with.
        func verifyCode(
            request: User_VerifyCodeRequest,
            context: GRPCCore.ServerContext
        ) async throws -> User_VerifyCodeResponse

        /// Handle the "UploadPhoto" method.
        ///
        /// - Parameters:
        ///   - request: A `User_UploadPhotoRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `User_UploadPhotoResponse` to respond with.
        func uploadPhoto(
            request: User_UploadPhotoRequest,
            context: GRPCCore.ServerContext
        ) async throws -> User_UploadPhotoResponse

        /// Handle the "GetUserPhotos" method.
        ///
        /// - Parameters:
        ///   - request: A `User_GetUserPhotosRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `User_GetUserPhotosResponse` to respond with.
        func getUserPhotos(
            request: User_GetUserPhotosRequest,
            context: GRPCCore.ServerContext
        ) async throws -> User_GetUserPhotosResponse
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension User_UserService.StreamingServiceProtocol {
    internal func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: User_UserService.Method.CreateUser.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_CreateUserRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<User_CreateUserResponse>(),
            handler: { request, context in
                try await self.createUser(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: User_UserService.Method.GetUser.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_GetUserRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<User_GetUserResponse>(),
            handler: { request, context in
                try await self.getUser(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: User_UserService.Method.UpdateUser.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_UpdateUserRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<User_UpdateUserResponse>(),
            handler: { request, context in
                try await self.updateUser(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: User_UserService.Method.DeleteUser.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_DeleteUserRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<User_DeleteUserResponse>(),
            handler: { request, context in
                try await self.deleteUser(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: User_UserService.Method.AuthenticateUser.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_AuthenticateUserRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<User_AuthenticateUserResponse>(),
            handler: { request, context in
                try await self.authenticateUser(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: User_UserService.Method.ValidateToken.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_ValidateTokenRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<User_ValidateTokenResponse>(),
            handler: { request, context in
                try await self.validateToken(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: User_UserService.Method.RefreshToken.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_RefreshTokenRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<User_RefreshTokenResponse>(),
            handler: { request, context in
                try await self.refreshToken(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: User_UserService.Method.SendVerificationCode.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_SendVerificationCodeRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<User_SendVerificationCodeResponse>(),
            handler: { request, context in
                try await self.sendVerificationCode(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: User_UserService.Method.VerifyCode.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_VerifyCodeRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<User_VerifyCodeResponse>(),
            handler: { request, context in
                try await self.verifyCode(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: User_UserService.Method.UploadPhoto.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_UploadPhotoRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<User_UploadPhotoResponse>(),
            handler: { request, context in
                try await self.uploadPhoto(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: User_UserService.Method.GetUserPhotos.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_GetUserPhotosRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<User_GetUserPhotosResponse>(),
            handler: { request, context in
                try await self.getUserPhotos(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension User_UserService.ServiceProtocol {
    internal func createUser(
        request: GRPCCore.StreamingServerRequest<User_CreateUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<User_CreateUserResponse> {
        let response = try await self.createUser(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func getUser(
        request: GRPCCore.StreamingServerRequest<User_GetUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<User_GetUserResponse> {
        let response = try await self.getUser(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func updateUser(
        request: GRPCCore.StreamingServerRequest<User_UpdateUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<User_UpdateUserResponse> {
        let response = try await self.updateUser(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func deleteUser(
        request: GRPCCore.StreamingServerRequest<User_DeleteUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<User_DeleteUserResponse> {
        let response = try await self.deleteUser(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func authenticateUser(
        request: GRPCCore.StreamingServerRequest<User_AuthenticateUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<User_AuthenticateUserResponse> {
        let response = try await self.authenticateUser(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func validateToken(
        request: GRPCCore.StreamingServerRequest<User_ValidateTokenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<User_ValidateTokenResponse> {
        let response = try await self.validateToken(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func refreshToken(
        request: GRPCCore.StreamingServerRequest<User_RefreshTokenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<User_RefreshTokenResponse> {
        let response = try await self.refreshToken(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func sendVerificationCode(
        request: GRPCCore.StreamingServerRequest<User_SendVerificationCodeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<User_SendVerificationCodeResponse> {
        let response = try await self.sendVerificationCode(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func verifyCode(
        request: GRPCCore.StreamingServerRequest<User_VerifyCodeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<User_VerifyCodeResponse> {
        let response = try await self.verifyCode(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func uploadPhoto(
        request: GRPCCore.StreamingServerRequest<User_UploadPhotoRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<User_UploadPhotoResponse> {
        let response = try await self.uploadPhoto(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    internal func getUserPhotos(
        request: GRPCCore.StreamingServerRequest<User_GetUserPhotosRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<User_GetUserPhotosResponse> {
        let response = try await self.getUserPhotos(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension User_UserService.SimpleServiceProtocol {
    internal func createUser(
        request: GRPCCore.ServerRequest<User_CreateUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<User_CreateUserResponse> {
        return GRPCCore.ServerResponse<User_CreateUserResponse>(
            message: try await self.createUser(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func getUser(
        request: GRPCCore.ServerRequest<User_GetUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<User_GetUserResponse> {
        return GRPCCore.ServerResponse<User_GetUserResponse>(
            message: try await self.getUser(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func updateUser(
        request: GRPCCore.ServerRequest<User_UpdateUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<User_UpdateUserResponse> {
        return GRPCCore.ServerResponse<User_UpdateUserResponse>(
            message: try await self.updateUser(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func deleteUser(
        request: GRPCCore.ServerRequest<User_DeleteUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<User_DeleteUserResponse> {
        return GRPCCore.ServerResponse<User_DeleteUserResponse>(
            message: try await self.deleteUser(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func authenticateUser(
        request: GRPCCore.ServerRequest<User_AuthenticateUserRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<User_AuthenticateUserResponse> {
        return GRPCCore.ServerResponse<User_AuthenticateUserResponse>(
            message: try await self.authenticateUser(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func validateToken(
        request: GRPCCore.ServerRequest<User_ValidateTokenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<User_ValidateTokenResponse> {
        return GRPCCore.ServerResponse<User_ValidateTokenResponse>(
            message: try await self.validateToken(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func refreshToken(
        request: GRPCCore.ServerRequest<User_RefreshTokenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<User_RefreshTokenResponse> {
        return GRPCCore.ServerResponse<User_RefreshTokenResponse>(
            message: try await self.refreshToken(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func sendVerificationCode(
        request: GRPCCore.ServerRequest<User_SendVerificationCodeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<User_SendVerificationCodeResponse> {
        return GRPCCore.ServerResponse<User_SendVerificationCodeResponse>(
            message: try await self.sendVerificationCode(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func verifyCode(
        request: GRPCCore.ServerRequest<User_VerifyCodeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<User_VerifyCodeResponse> {
        return GRPCCore.ServerResponse<User_VerifyCodeResponse>(
            message: try await self.verifyCode(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func uploadPhoto(
        request: GRPCCore.ServerRequest<User_UploadPhotoRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<User_UploadPhotoResponse> {
        return GRPCCore.ServerResponse<User_UploadPhotoResponse>(
            message: try await self.uploadPhoto(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    internal func getUserPhotos(
        request: GRPCCore.ServerRequest<User_GetUserPhotosRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<User_GetUserPhotosResponse> {
        return GRPCCore.ServerResponse<User_GetUserPhotosResponse>(
            message: try await self.getUserPhotos(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: user.UserService (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension User_UserService {
    /// Generated client protocol for the "user.UserService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    internal protocol ClientProtocol: Sendable {
        /// Call the "CreateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_CreateUserRequest` message.
        ///   - serializer: A serializer for `User_CreateUserRequest` messages.
        ///   - deserializer: A deserializer for `User_CreateUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createUser<Result>(
            request: GRPCCore.ClientRequest<User_CreateUserRequest>,
            serializer: some GRPCCore.MessageSerializer<User_CreateUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_CreateUserResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_CreateUserResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_GetUserRequest` message.
        ///   - serializer: A serializer for `User_GetUserRequest` messages.
        ///   - deserializer: A deserializer for `User_GetUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUser<Result>(
            request: GRPCCore.ClientRequest<User_GetUserRequest>,
            serializer: some GRPCCore.MessageSerializer<User_GetUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_GetUserResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_GetUserResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_UpdateUserRequest` message.
        ///   - serializer: A serializer for `User_UpdateUserRequest` messages.
        ///   - deserializer: A deserializer for `User_UpdateUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateUser<Result>(
            request: GRPCCore.ClientRequest<User_UpdateUserRequest>,
            serializer: some GRPCCore.MessageSerializer<User_UpdateUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_UpdateUserResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_UpdateUserResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_DeleteUserRequest` message.
        ///   - serializer: A serializer for `User_DeleteUserRequest` messages.
        ///   - deserializer: A deserializer for `User_DeleteUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteUser<Result>(
            request: GRPCCore.ClientRequest<User_DeleteUserRequest>,
            serializer: some GRPCCore.MessageSerializer<User_DeleteUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_DeleteUserResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_DeleteUserResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AuthenticateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_AuthenticateUserRequest` message.
        ///   - serializer: A serializer for `User_AuthenticateUserRequest` messages.
        ///   - deserializer: A deserializer for `User_AuthenticateUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func authenticateUser<Result>(
            request: GRPCCore.ClientRequest<User_AuthenticateUserRequest>,
            serializer: some GRPCCore.MessageSerializer<User_AuthenticateUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_AuthenticateUserResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_AuthenticateUserResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ValidateToken" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_ValidateTokenRequest` message.
        ///   - serializer: A serializer for `User_ValidateTokenRequest` messages.
        ///   - deserializer: A deserializer for `User_ValidateTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func validateToken<Result>(
            request: GRPCCore.ClientRequest<User_ValidateTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<User_ValidateTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_ValidateTokenResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_ValidateTokenResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RefreshToken" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_RefreshTokenRequest` message.
        ///   - serializer: A serializer for `User_RefreshTokenRequest` messages.
        ///   - deserializer: A deserializer for `User_RefreshTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func refreshToken<Result>(
            request: GRPCCore.ClientRequest<User_RefreshTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<User_RefreshTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_RefreshTokenResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_RefreshTokenResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SendVerificationCode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_SendVerificationCodeRequest` message.
        ///   - serializer: A serializer for `User_SendVerificationCodeRequest` messages.
        ///   - deserializer: A deserializer for `User_SendVerificationCodeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func sendVerificationCode<Result>(
            request: GRPCCore.ClientRequest<User_SendVerificationCodeRequest>,
            serializer: some GRPCCore.MessageSerializer<User_SendVerificationCodeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_SendVerificationCodeResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_SendVerificationCodeResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "VerifyCode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_VerifyCodeRequest` message.
        ///   - serializer: A serializer for `User_VerifyCodeRequest` messages.
        ///   - deserializer: A deserializer for `User_VerifyCodeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func verifyCode<Result>(
            request: GRPCCore.ClientRequest<User_VerifyCodeRequest>,
            serializer: some GRPCCore.MessageSerializer<User_VerifyCodeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_VerifyCodeResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_VerifyCodeResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UploadPhoto" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_UploadPhotoRequest` message.
        ///   - serializer: A serializer for `User_UploadPhotoRequest` messages.
        ///   - deserializer: A deserializer for `User_UploadPhotoResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func uploadPhoto<Result>(
            request: GRPCCore.ClientRequest<User_UploadPhotoRequest>,
            serializer: some GRPCCore.MessageSerializer<User_UploadPhotoRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_UploadPhotoResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_UploadPhotoResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetUserPhotos" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_GetUserPhotosRequest` message.
        ///   - serializer: A serializer for `User_GetUserPhotosRequest` messages.
        ///   - deserializer: A deserializer for `User_GetUserPhotosResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getUserPhotos<Result>(
            request: GRPCCore.ClientRequest<User_GetUserPhotosRequest>,
            serializer: some GRPCCore.MessageSerializer<User_GetUserPhotosRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_GetUserPhotosResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_GetUserPhotosResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "user.UserService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    internal struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        internal init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "CreateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_CreateUserRequest` message.
        ///   - serializer: A serializer for `User_CreateUserRequest` messages.
        ///   - deserializer: A deserializer for `User_CreateUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func createUser<Result>(
            request: GRPCCore.ClientRequest<User_CreateUserRequest>,
            serializer: some GRPCCore.MessageSerializer<User_CreateUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_CreateUserResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_CreateUserResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: User_UserService.Method.CreateUser.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_GetUserRequest` message.
        ///   - serializer: A serializer for `User_GetUserRequest` messages.
        ///   - deserializer: A deserializer for `User_GetUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getUser<Result>(
            request: GRPCCore.ClientRequest<User_GetUserRequest>,
            serializer: some GRPCCore.MessageSerializer<User_GetUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_GetUserResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_GetUserResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: User_UserService.Method.GetUser.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_UpdateUserRequest` message.
        ///   - serializer: A serializer for `User_UpdateUserRequest` messages.
        ///   - deserializer: A deserializer for `User_UpdateUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func updateUser<Result>(
            request: GRPCCore.ClientRequest<User_UpdateUserRequest>,
            serializer: some GRPCCore.MessageSerializer<User_UpdateUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_UpdateUserResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_UpdateUserResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: User_UserService.Method.UpdateUser.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_DeleteUserRequest` message.
        ///   - serializer: A serializer for `User_DeleteUserRequest` messages.
        ///   - deserializer: A deserializer for `User_DeleteUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func deleteUser<Result>(
            request: GRPCCore.ClientRequest<User_DeleteUserRequest>,
            serializer: some GRPCCore.MessageSerializer<User_DeleteUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_DeleteUserResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_DeleteUserResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: User_UserService.Method.DeleteUser.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AuthenticateUser" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_AuthenticateUserRequest` message.
        ///   - serializer: A serializer for `User_AuthenticateUserRequest` messages.
        ///   - deserializer: A deserializer for `User_AuthenticateUserResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func authenticateUser<Result>(
            request: GRPCCore.ClientRequest<User_AuthenticateUserRequest>,
            serializer: some GRPCCore.MessageSerializer<User_AuthenticateUserRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_AuthenticateUserResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_AuthenticateUserResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: User_UserService.Method.AuthenticateUser.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ValidateToken" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_ValidateTokenRequest` message.
        ///   - serializer: A serializer for `User_ValidateTokenRequest` messages.
        ///   - deserializer: A deserializer for `User_ValidateTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func validateToken<Result>(
            request: GRPCCore.ClientRequest<User_ValidateTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<User_ValidateTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_ValidateTokenResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_ValidateTokenResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: User_UserService.Method.ValidateToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RefreshToken" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_RefreshTokenRequest` message.
        ///   - serializer: A serializer for `User_RefreshTokenRequest` messages.
        ///   - deserializer: A deserializer for `User_RefreshTokenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func refreshToken<Result>(
            request: GRPCCore.ClientRequest<User_RefreshTokenRequest>,
            serializer: some GRPCCore.MessageSerializer<User_RefreshTokenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_RefreshTokenResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_RefreshTokenResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: User_UserService.Method.RefreshToken.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SendVerificationCode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_SendVerificationCodeRequest` message.
        ///   - serializer: A serializer for `User_SendVerificationCodeRequest` messages.
        ///   - deserializer: A deserializer for `User_SendVerificationCodeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func sendVerificationCode<Result>(
            request: GRPCCore.ClientRequest<User_SendVerificationCodeRequest>,
            serializer: some GRPCCore.MessageSerializer<User_SendVerificationCodeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_SendVerificationCodeResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_SendVerificationCodeResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: User_UserService.Method.SendVerificationCode.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "VerifyCode" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_VerifyCodeRequest` message.
        ///   - serializer: A serializer for `User_VerifyCodeRequest` messages.
        ///   - deserializer: A deserializer for `User_VerifyCodeResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func verifyCode<Result>(
            request: GRPCCore.ClientRequest<User_VerifyCodeRequest>,
            serializer: some GRPCCore.MessageSerializer<User_VerifyCodeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_VerifyCodeResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_VerifyCodeResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: User_UserService.Method.VerifyCode.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UploadPhoto" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_UploadPhotoRequest` message.
        ///   - serializer: A serializer for `User_UploadPhotoRequest` messages.
        ///   - deserializer: A deserializer for `User_UploadPhotoResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func uploadPhoto<Result>(
            request: GRPCCore.ClientRequest<User_UploadPhotoRequest>,
            serializer: some GRPCCore.MessageSerializer<User_UploadPhotoRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_UploadPhotoResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_UploadPhotoResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: User_UserService.Method.UploadPhoto.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetUserPhotos" method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `User_GetUserPhotosRequest` message.
        ///   - serializer: A serializer for `User_GetUserPhotosRequest` messages.
        ///   - deserializer: A deserializer for `User_GetUserPhotosResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        internal func getUserPhotos<Result>(
            request: GRPCCore.ClientRequest<User_GetUserPhotosRequest>,
            serializer: some GRPCCore.MessageSerializer<User_GetUserPhotosRequest>,
            deserializer: some GRPCCore.MessageDeserializer<User_GetUserPhotosResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_GetUserPhotosResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: User_UserService.Method.GetUserPhotos.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension User_UserService.ClientProtocol {
    /// Call the "CreateUser" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `User_CreateUserRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createUser<Result>(
        request: GRPCCore.ClientRequest<User_CreateUserRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_CreateUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createUser(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<User_CreateUserRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_CreateUserResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUser" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `User_GetUserRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getUser<Result>(
        request: GRPCCore.ClientRequest<User_GetUserRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_GetUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUser(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<User_GetUserRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_GetUserResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateUser" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `User_UpdateUserRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateUser<Result>(
        request: GRPCCore.ClientRequest<User_UpdateUserRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_UpdateUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateUser(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<User_UpdateUserRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_UpdateUserResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteUser" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `User_DeleteUserRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteUser<Result>(
        request: GRPCCore.ClientRequest<User_DeleteUserRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_DeleteUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteUser(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<User_DeleteUserRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_DeleteUserResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AuthenticateUser" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `User_AuthenticateUserRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func authenticateUser<Result>(
        request: GRPCCore.ClientRequest<User_AuthenticateUserRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_AuthenticateUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.authenticateUser(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<User_AuthenticateUserRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_AuthenticateUserResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ValidateToken" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `User_ValidateTokenRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func validateToken<Result>(
        request: GRPCCore.ClientRequest<User_ValidateTokenRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_ValidateTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.validateToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<User_ValidateTokenRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_ValidateTokenResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RefreshToken" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `User_RefreshTokenRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func refreshToken<Result>(
        request: GRPCCore.ClientRequest<User_RefreshTokenRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_RefreshTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.refreshToken(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<User_RefreshTokenRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_RefreshTokenResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SendVerificationCode" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `User_SendVerificationCodeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendVerificationCode<Result>(
        request: GRPCCore.ClientRequest<User_SendVerificationCodeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_SendVerificationCodeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.sendVerificationCode(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<User_SendVerificationCodeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_SendVerificationCodeResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "VerifyCode" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `User_VerifyCodeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func verifyCode<Result>(
        request: GRPCCore.ClientRequest<User_VerifyCodeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_VerifyCodeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.verifyCode(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<User_VerifyCodeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_VerifyCodeResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UploadPhoto" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `User_UploadPhotoRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func uploadPhoto<Result>(
        request: GRPCCore.ClientRequest<User_UploadPhotoRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_UploadPhotoResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.uploadPhoto(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<User_UploadPhotoRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_UploadPhotoResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUserPhotos" method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `User_GetUserPhotosRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getUserPhotos<Result>(
        request: GRPCCore.ClientRequest<User_GetUserPhotosRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_GetUserPhotosResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getUserPhotos(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<User_GetUserPhotosRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<User_GetUserPhotosResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension User_UserService.ClientProtocol {
    /// Call the "CreateUser" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func createUser<Result>(
        _ message: User_CreateUserRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_CreateUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<User_CreateUserRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createUser(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUser" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getUser<Result>(
        _ message: User_GetUserRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_GetUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<User_GetUserRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getUser(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateUser" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func updateUser<Result>(
        _ message: User_UpdateUserRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_UpdateUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<User_UpdateUserRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateUser(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteUser" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func deleteUser<Result>(
        _ message: User_DeleteUserRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_DeleteUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<User_DeleteUserRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteUser(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AuthenticateUser" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func authenticateUser<Result>(
        _ message: User_AuthenticateUserRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_AuthenticateUserResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<User_AuthenticateUserRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.authenticateUser(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ValidateToken" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func validateToken<Result>(
        _ message: User_ValidateTokenRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_ValidateTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<User_ValidateTokenRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.validateToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RefreshToken" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func refreshToken<Result>(
        _ message: User_RefreshTokenRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_RefreshTokenResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<User_RefreshTokenRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.refreshToken(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SendVerificationCode" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func sendVerificationCode<Result>(
        _ message: User_SendVerificationCodeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_SendVerificationCodeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<User_SendVerificationCodeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.sendVerificationCode(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "VerifyCode" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func verifyCode<Result>(
        _ message: User_VerifyCodeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_VerifyCodeResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<User_VerifyCodeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.verifyCode(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UploadPhoto" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func uploadPhoto<Result>(
        _ message: User_UploadPhotoRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_UploadPhotoResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<User_UploadPhotoRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.uploadPhoto(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetUserPhotos" method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    internal func getUserPhotos<Result>(
        _ message: User_GetUserPhotosRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<User_GetUserPhotosResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<User_GetUserPhotosRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getUserPhotos(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}